{"version":3,"sources":["ReanimatedScreen.tsx"],"names":["React","Platform","Screen","ScreenContext","Animated","useEvent","useSharedValue","ReanimatedTransitionProgressContext","AnimatedScreen","createAnimatedComponent","ReanimatedScreenWrapper","Component","ref","props","onComponentRef","setNativeProps","render","setRef","ReanimatedScreen","forwardRef","children","rest","progress","closing","goingForward","isNativeStack","undefined","event","value","OS","displayName","ReanimatedScreenProvider"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,SAASC,QAAT,QAA+B,cAA/B;AACA,SACEC,MADF,EAGEC,aAHF,QAKO,sBALP,C,CAOA;;AACA,OAAOC,QAAP,IAAmBC,QAAnB,EAA6BC,cAA7B,QAAmD,yBAAnD;AACA,OAAOC,mCAAP,MAAgD,uCAAhD;AAEA,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,uBAAT,CACpBP,MADoB,CAAvB;;AAIA,MAAMQ,uBAAN,SAAsCV,KAAK,CAACW,SAA5C,CAAmE;AAAA;AAAA;;AAAA,iCACb,IADa;;AAAA,oCAOvDC,GAAD,IAAqD;AAAA;;AAC5D,WAAKA,GAAL,GAAWA,GAAX;AACA,mDAAKC,KAAL,EAAWC,cAAX,kGAA4BF,GAA5B;AACD,KAVgE;AAAA;;AAGjEG,EAAAA,cAAc,CAACF,KAAD,EAA2B;AAAA;;AACvC,sBAAKD,GAAL,wDAAUG,cAAV,CAAyBF,KAAzB;AACD;;AAODG,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,gBAAD,eACM,KAAKH,KADX;AAEE;AACA,MAAA,GAAG,EAAE,KAAKI;AAHZ,OADF;AAOD;;AApBgE;;AAuBnE,MAAMC,gBAAgB,gBAAGlB,KAAK,CAACmB,UAAN,CACvB,CAACN,KAAD,EAAQD,GAAR,KAAgB;AACd,QAAM;AAAEQ,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAwBR,KAA9B;AAEA,QAAMS,QAAQ,GAAGhB,cAAc,CAAC,CAAD,CAA/B;AACA,QAAMiB,OAAO,GAAGjB,cAAc,CAAC,CAAD,CAA9B;AACA,QAAMkB,YAAY,GAAGlB,cAAc,CAAC,CAAD,CAAnC;AAEA,sBACE,oBAAC,cAAD,CACE;AADF;AAEE,IAAA,GAAG,EAAEM,GAFP,CAGE;AAHF;AAIE,IAAA,8BAA8B,EAC5B,CAACC,KAAK,CAACY,aAAP,GACIC,SADJ,GAEIrB,QAAQ,CACLsB,KAAD,IAAwC;AACtC;;AACAL,MAAAA,QAAQ,CAACM,KAAT,GAAiBD,KAAK,CAACL,QAAvB;AACAC,MAAAA,OAAO,CAACK,KAAR,GAAgBD,KAAK,CAACJ,OAAtB;AACAC,MAAAA,YAAY,CAACI,KAAb,GAAqBD,KAAK,CAACH,YAA3B;AACD,KANK,EAON,CACE;AACA;AACAvB,IAAAA,QAAQ,CAAC4B,EAAT,KAAgB,SAAhB,GACI,sBADJ,GAEI,uBALN,CAPM;AAPhB,KAuBMR,IAvBN,GAwBG,CAACR,KAAK,CAACY,aAAP,GAAyB;AACxBL,EAAAA,QADD,gBAGC,oBAAC,mCAAD,CAAqC,QAArC;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,QAAQ,EAAEA,QADL;AAELC,MAAAA,OAAO,EAAEA,OAFJ;AAGLC,MAAAA,YAAY,EAAEA;AAHT;AADT,KAMGJ,QANH,CA3BJ,CADF;AAuCD,CA/CsB,CAAzB,C,CAkDA;;AACAF,gBAAgB,CAACY,WAAjB,GAA+B,kBAA/B;AAEA,eAAe,SAASC,wBAAT,CACblB,KADa,EAEb;AACA;AAAA;AACE;AACA,wBAAC,aAAD,CAAe,QAAf;AAAwB,MAAA,KAAK,EAAEH;AAA/B,OACGG,KAAK,CAACO,QADT;AAFF;AAMD","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { Platform, View } from 'react-native';\nimport {\n  Screen,\n  ScreenProps,\n  ScreenContext,\n  TransitionProgressEventType,\n} from 'react-native-screens';\n\n// @ts-ignore file to be used only if `react-native-reanimated` available in the project\nimport Animated, { useEvent, useSharedValue } from 'react-native-reanimated';\nimport ReanimatedTransitionProgressContext from './ReanimatedTransitionProgressContext';\n\nconst AnimatedScreen = Animated.createAnimatedComponent(\n  (Screen as unknown) as React.ComponentClass\n);\n\nclass ReanimatedScreenWrapper extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    return (\n      <ReanimatedScreen\n        {...this.props}\n        // @ts-ignore some problems with ref\n        ref={this.setRef}\n      />\n    );\n  }\n}\n\nconst ReanimatedScreen = React.forwardRef<typeof AnimatedScreen, ScreenProps>(\n  (props, ref) => {\n    const { children, ...rest } = props;\n\n    const progress = useSharedValue(0);\n    const closing = useSharedValue(0);\n    const goingForward = useSharedValue(0);\n\n    return (\n      <AnimatedScreen\n        // @ts-ignore some problems with ref and onTransitionProgressReanimated being \"fake\" prop for parsing of `useEvent` return value\n        ref={ref}\n        // ReanimatedScreen.tsx should only be used by Screens of native-stack, but it always better to check\n        onTransitionProgressReanimated={\n          !props.isNativeStack\n            ? undefined\n            : useEvent(\n                (event: TransitionProgressEventType) => {\n                  'worklet';\n                  progress.value = event.progress;\n                  closing.value = event.closing;\n                  goingForward.value = event.goingForward;\n                },\n                [\n                  // This should not be necessary, but is not properly managed by `react-native-reanimated`\n                  // @ts-ignore wrong type\n                  Platform.OS === 'android'\n                    ? 'onTransitionProgress'\n                    : 'topTransitionProgress',\n                ]\n              )\n        }\n        {...rest}>\n        {!props.isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n          children\n        ) : (\n          <ReanimatedTransitionProgressContext.Provider\n            value={{\n              progress: progress,\n              closing: closing,\n              goingForward: goingForward,\n            }}>\n            {children}\n          </ReanimatedTransitionProgressContext.Provider>\n        )}\n      </AnimatedScreen>\n    );\n  }\n);\n\n// used to silence error \"Component definition is missing display name\"\nReanimatedScreen.displayName = 'ReanimatedScreen';\n\nexport default function ReanimatedScreenProvider(\n  props: PropsWithChildren<unknown>\n) {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    <ScreenContext.Provider value={ReanimatedScreenWrapper as any}>\n      {props.children}\n    </ScreenContext.Provider>\n  );\n}\n"]}